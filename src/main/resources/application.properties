# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection
# note: spring boot uses @property.name@ convention,
#       as oppose to ${property.name}

# Primary database configs
app.spring.datasource.url= @app.database.url@
app.spring.datasource.driver-class-name= @app.database.driver@
app.spring.datasource.username = @app.database.username@
app.spring.datasource.password = @app.database.password@

# Microsoft SQL - AORT
master.spring.datasource.url=@master.database.url@
master.spring.datasource.driver-class-name=@master.database.driver@
master.spring.datasource.username = @master.database.username@
master.spring.datasource.password = @master.database.password@

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.generate-ddl = false

# WARNING DO NOT set this to CREATE on 2nd run
spring.jpa.hibernate.ddl-auto = none

# Naming strategy
spring.jpa.hibernate.naming.strategy= org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.database-platform=org.hibernate.dialect.SQLServer2012Dialect

# ===============================
# = Data - Rest
# ===============================
spring.data.rest.basePath=/api

